// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/job-application/dto"
	mock "github.com/stretchr/testify/mock"

	model "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/job-application/model"
)

// JobUsecase is an autogenerated mock type for the JobUsecase type
type JobUsecase struct {
	mock.Mock
}

// CreateJob provides a mock function with given fields: _a0, _a1
func (_m *JobUsecase) CreateJob(_a0 context.Context, _a1 model.Job) (*model.Job, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Job
	if rf, ok := ret.Get(0).(func(context.Context, model.Job) *model.Job); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Job) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: _a0, _a1
func (_m *JobUsecase) DeleteJob(_a0 context.Context, _a1 dto.DeleteJobReq) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.DeleteJobReq) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllJobs provides a mock function with given fields: _a0
func (_m *JobUsecase) GetAllJobs(_a0 context.Context) ([]model.Job, error) {
	ret := _m.Called(_a0)

	var r0 []model.Job
	if rf, ok := ret.Get(0).(func(context.Context) []model.Job); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobExpireDate provides a mock function with given fields: _a0, _a1
func (_m *JobUsecase) UpdateJobExpireDate(_a0 context.Context, _a1 dto.UpdateJobReq) (*model.Job, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Job
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateJobReq) *model.Job); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateJobReq) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewJobUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewJobUsecase creates a new instance of JobUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewJobUsecase(t mockConstructorTestingTNewJobUsecase) *JobUsecase {
	mock := &JobUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
