// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "git.garena.com/sea-labs-id/bootcamp/batch-02/ziad-rahmatullah/job-application/model"
	mock "github.com/stretchr/testify/mock"
)

// ApplyJobUsecase is an autogenerated mock type for the ApplyJobUsecase type
type ApplyJobUsecase struct {
	mock.Mock
}

// CreateApplyJob provides a mock function with given fields: _a0, _a1
func (_m *ApplyJobUsecase) CreateApplyJob(_a0 context.Context, _a1 model.ApplyJob) (*model.ApplyJob, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.ApplyJob
	if rf, ok := ret.Get(0).(func(context.Context, model.ApplyJob) *model.ApplyJob); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplyJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.ApplyJob) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllRecords provides a mock function with given fields: _a0
func (_m *ApplyJobUsecase) GetAllRecords(_a0 context.Context) ([]model.ApplyJob, error) {
	ret := _m.Called(_a0)

	var r0 []model.ApplyJob
	if rf, ok := ret.Get(0).(func(context.Context) []model.ApplyJob); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ApplyJob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApplyJobUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplyJobUsecase creates a new instance of ApplyJobUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplyJobUsecase(t mockConstructorTestingTNewApplyJobUsecase) *ApplyJobUsecase {
	mock := &ApplyJobUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
