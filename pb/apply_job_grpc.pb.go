// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/apply_job.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplyJobServiceClient is the client API for ApplyJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplyJobServiceClient interface {
	GetAllRecords(ctx context.Context, in *RecordsReq, opts ...grpc.CallOption) (*RecordsRes, error)
	ApplyJob(ctx context.Context, in *ApplyJobReq, opts ...grpc.CallOption) (*ApplyJobRes, error)
}

type applyJobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplyJobServiceClient(cc grpc.ClientConnInterface) ApplyJobServiceClient {
	return &applyJobServiceClient{cc}
}

func (c *applyJobServiceClient) GetAllRecords(ctx context.Context, in *RecordsReq, opts ...grpc.CallOption) (*RecordsRes, error) {
	out := new(RecordsRes)
	err := c.cc.Invoke(ctx, "/apply_job.ApplyJobService/GetAllRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applyJobServiceClient) ApplyJob(ctx context.Context, in *ApplyJobReq, opts ...grpc.CallOption) (*ApplyJobRes, error) {
	out := new(ApplyJobRes)
	err := c.cc.Invoke(ctx, "/apply_job.ApplyJobService/ApplyJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplyJobServiceServer is the server API for ApplyJobService service.
// All implementations must embed UnimplementedApplyJobServiceServer
// for forward compatibility
type ApplyJobServiceServer interface {
	GetAllRecords(context.Context, *RecordsReq) (*RecordsRes, error)
	ApplyJob(context.Context, *ApplyJobReq) (*ApplyJobRes, error)
	mustEmbedUnimplementedApplyJobServiceServer()
}

// UnimplementedApplyJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplyJobServiceServer struct {
}

func (UnimplementedApplyJobServiceServer) GetAllRecords(context.Context, *RecordsReq) (*RecordsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecords not implemented")
}
func (UnimplementedApplyJobServiceServer) ApplyJob(context.Context, *ApplyJobReq) (*ApplyJobRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyJob not implemented")
}
func (UnimplementedApplyJobServiceServer) mustEmbedUnimplementedApplyJobServiceServer() {}

// UnsafeApplyJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplyJobServiceServer will
// result in compilation errors.
type UnsafeApplyJobServiceServer interface {
	mustEmbedUnimplementedApplyJobServiceServer()
}

func RegisterApplyJobServiceServer(s grpc.ServiceRegistrar, srv ApplyJobServiceServer) {
	s.RegisterService(&ApplyJobService_ServiceDesc, srv)
}

func _ApplyJobService_GetAllRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplyJobServiceServer).GetAllRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apply_job.ApplyJobService/GetAllRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplyJobServiceServer).GetAllRecords(ctx, req.(*RecordsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplyJobService_ApplyJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplyJobServiceServer).ApplyJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apply_job.ApplyJobService/ApplyJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplyJobServiceServer).ApplyJob(ctx, req.(*ApplyJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplyJobService_ServiceDesc is the grpc.ServiceDesc for ApplyJobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplyJobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apply_job.ApplyJobService",
	HandlerType: (*ApplyJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRecords",
			Handler:    _ApplyJobService_GetAllRecords_Handler,
		},
		{
			MethodName: "ApplyJob",
			Handler:    _ApplyJobService_ApplyJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/apply_job.proto",
}
